#!/bin/bash
#
# Copyright IBM Corp All Rights Reserved
#
# SPDX-License-Identifier: Apache-2.0
#

# This script extends the Hyperledger Fabric By Your First Network by
# adding a third organization to the network previously setup in the
# BYFN tutorial.


# prepending $PWD/../bin to PATH to ensure we are picking up the correct binaries
# this may be commented out to resolve installed version of tools if desired

export PATH=${PWD}/../../fabric-samples/bin:${PWD}:$PATH
export FABRIC_CFG_PATH=${PWD}
export VERBOSE=false

# timeout duration - the duration the CLI should wait for a response from
# another container before giving up
CLI_TIMEOUT=10
#default for delay
CLI_DELAY=3
# channel name defaults to "mychannel"
CHANNEL_NAME="mychannel"
# use node language for chaincode
LANGUAGE=node

# Generates Org3 certs using cryptogen tool
  which cryptogen
  if [ "$?" -ne 0 ]; then
    echo "cryptogen tool not found. exiting"
    exit 1
  fi
  echo
  echo "####################################################################"
  echo "######## Generate Org3 certificates using cryptogen tool ###########"
  echo "####################################################################"
  if [ -d "org3-artifacts/crypto-config" ]; then
      rm -Rf org3-artifacts/crypto-config
  fi
  (cd org3-artifacts
   set -x
   cryptogen generate --config=../org3-artifacts/org3-crypto.yaml
   res=$?
   set +x
   if [ $res -ne 0 ]; then
     echo "Failed to generate certificates..."
     exit 1
   fi
  )
  echo

# Using docker-compose-template-org3.yml, replace constants with private key file names
# generated by the cryptogen tool and output a docker-compose-org3.yml specific to this
# configuration
  # sed on MacOSX does not support -i flag with a null extension. We will use
  # 't' for our back-up's extension and delete it at the end of the function
  ARCH=$(uname -s | grep Darwin)
  if [ "$ARCH" == "Darwin" ]; then
    OPTS="-it"
  else
    OPTS="-i"
  fi

# Copy the template to the file that will be modified to add the private key for Org3
  cp docker-compose-template-org3.yml docker-compose-org3.yml

# The next steps will replace the template's contents with the
# actual values of the private key file name for the org3 CA.
  CURRENT_DIR=$PWD
  cd org3-artifacts/crypto-config/peerOrganizations/org3.example.com/ca/
  PRIV_KEY=$(ls *_sk)
  cd "$CURRENT_DIR"
  sed $OPTS "s/CA3_PRIVATE_KEY/${PRIV_KEY}/g" docker-compose-org3.yml

# If MacOSX, remove the temporary backup of the docker-compose-org3 file
  if [ "$ARCH" == "Darwin" ]; then
    rm docker-compose-org3.ymlt
  fi

# Generate channel configuration transaction
  which configtxgen
  if [ "$?" -ne 0 ]; then
    echo "configtxgen tool not found. exiting"
    exit 1
  fi
  echo "####################################################################"
  echo "################  Generating Org3 config material ##################"
  echo "####################################################################"
  (cd org3-artifacts
   export FABRIC_CFG_PATH=$PWD
   set -x
   configtxgen -printOrg Org3MSP > ../config/org3.json
   res=$?
   set +x
   if [ $res -ne 0 ]; then
     echo "Failed to generate Org3 config material..."
     exit 1
   fi
  )
  cp -r ./crypto-config/ordererOrganizations ./org3-artifacts/crypto-config/
  echo


# If BYFN wasn't run abort
if [ ! -d crypto-config ]; then
  echo
  echo "ERROR: Please, run loadBlueCoin.sh first."
  echo
  exit 1
fi


# Use the CLI container to create the configuration transaction needed to add
# Org3 to the network
  echo
  echo "####################################################################"
  echo "############ Generate and submit config tx to add Org3 #############"
  echo "####################################################################"
  docker exec cli0.org1 scripts/step1org3.sh $CHANNEL_NAME $CLI_DELAY $LANGUAGE $CLI_TIMEOUT $VERBOSE
  if [ $? -ne 0 ]; then
    echo "ERROR !!!! Unable to create config tx"
    exit 1
  fi

echo Artifacts, certificates, private keys, and docker-compose-org3.yml file are generated.